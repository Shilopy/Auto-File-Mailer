import streamlit as st
import win32com.client
import pythoncom
import os
import json
import time
from datetime import datetime, timedelta
import logging
import pandas as pd
import psutil
import subprocess
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit
st.set_page_config(
    page_title="Auto Sender Outlook",
    page_icon="üìß",
    layout="wide"
)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if not os.path.exists("logs"):
    os.makedirs("logs")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/sender.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
if 'last_log_entries' not in st.session_state:
    st.session_state.last_log_entries = []

# --- –ü–ï–†–ï–ú–ï–©–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–ï–†–í–ò–°–û–ú –ù–ê–ß–ê–õ–û ---
# –≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª—è –≤—ã–∑–æ–≤–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
def is_service_running():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–∏—Å –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∫–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–º—è —Ñ–∞–π–ª–∞ —Å–µ—Ä–≤–∏—Å–∞
            if proc.info['cmdline'] and 'sender_service.py' in ' '.join(proc.info['cmdline']):
                return True
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã, –∫ –∫–æ—Ç–æ—Ä—ã–º –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å
            pass
    return False

def start_service():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ –∫–æ–Ω—Å–æ–ª–∏"""
    try:
        # subprocess.CREATE_NEW_CONSOLE - —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –æ–∫–Ω–æ –∫–æ–Ω—Å–æ–ª–∏ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞
        subprocess.Popen([sys.executable, 'sender_service.py'],
                        creationflags=subprocess.CREATE_NEW_CONSOLE)
        st.sidebar.success("–°–µ—Ä–≤–∏—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—É—â–µ–Ω!")
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –ø—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ–ª –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
        time.sleep(0.5)
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å
        st.rerun()
    except Exception as e:
        st.sidebar.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

def stop_service():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    try:
        stopped_any = False
        # –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –≤—Å–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–∞–º
        for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∫–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–º—è —Ñ–∞–π–ª–∞ —Å–µ—Ä–≤–∏—Å–∞
                if proc.info['cmdline'] and 'sender_service.py' in ' '.join(proc.info['cmdline']):
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
                    proc.terminate()
                    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ 3 —Å–µ–∫—É–Ω–¥
                    proc.wait(timeout=3)
                    stopped_any = True
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess, subprocess.TimeoutExpired):
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞ —Ç–∞–π–º–∞—É—Ç
                pass
        if stopped_any:
            st.sidebar.success("–°–µ—Ä–≤–∏—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        else:
            st.sidebar.info("–°–µ—Ä–≤–∏—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        time.sleep(0.5)
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å
        st.rerun()
    except Exception as e:
        st.sidebar.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–∞: {e}")
# --- –ü–ï–†–ï–ú–ï–©–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–ï–†–í–ò–°–û–ú –ö–û–ù–ï–¶ ---

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üìß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ Outlook Win32")
st.markdown("---")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
page = st.sidebar.selectbox("–ù–∞–≤–∏–≥–∞—Ü–∏—è", ["–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", "–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤", "–õ–æ–≥–∏", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def load_config():
    default_config = {
        "folder_path": "C:\\Files\\Reports\\",
        "schedule_times": ["16:00"], # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        "email_config": {
            "7210": "ivanov@ya.ru",
            "7220": "pupkin@ya.ru",
            "7230": "gorohov@ya.ru"
        },
        "sender_email": "your@email.ru",
         "date_config": {
            "7210": {"days_offset": 1, "send_on_friday": 3},
            "7220": {"days_offset": 2, "send_on_friday": 4},
            "7230": {"days_offset": 2, "send_on_friday": 4}
        }
    }
    if os.path.exists("config.json"):
        try:
            with open("config.json", 'r', encoding='utf-8') as f:
                config = json.load(f)
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
                for key in default_config:
                    if key not in config:
                        config[key] = default_config[key]
                return config
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")
            return default_config
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open("config.json", 'w', encoding='utf-8') as f:
            json.dump(default_config, f, indent=2, ensure_ascii=False)
        return default_config

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def save_config(config):
    try:
        with open("config.json", 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2, ensure_ascii=False)
        st.success("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        logging.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Outlook
def connect_outlook():
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è COM –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        pythoncom.CoInitialize()
        outlook = win32com.client.Dispatch("Outlook.Application")
        st.success("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Outlook")
        logging.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Outlook")
        return outlook
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Outlook: {str(e)}")
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Outlook: {str(e)}")
        return None

# --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø get_files_for_today –ù–ê–ß–ê–õ–û ---
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ date_config
# (–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¢–û–õ–¨–ö–û –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.
#  –†–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å —É—á–µ—Ç–æ–º date_config –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ sender_service.py)
def get_files_for_today(folder_path):
    """
    –ò—â–µ—Ç —Ñ–∞–π–ª—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ date_config (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä).
    –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∫–ª–∞–¥–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–µ–ª–µ–≤—É—é –¥–∞—Ç—É —Ñ–∞–π–ª–∞ (—Å–µ–≥–æ–¥–Ω—è + days_offset –∏–ª–∏ send_on_friday).
    –ò—â–µ—Ç —Ñ–∞–π–ª—ã —Å –¥–∞—Ç–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYYMMDD –∏ –∫–æ–¥–æ–º —Å–∫–ª–∞–¥–∞ –≤ –Ω–∞—á–∞–ª–µ –∏–º–µ–Ω–∏.
    """
    try:
        today_dt_obj = datetime.now()
        config = load_config()
        date_config = config.get('date_config', {})
        email_config = config.get('email_config', {})

        grouped_files = {}

        for warehouse_code, date_info in date_config.items():
            email = email_config.get(warehouse_code)
            if not email:
                logging.debug(f"–ü—Ä–æ–ø—É—â–µ–Ω —Å–∫–ª–∞–¥ {warehouse_code}: –Ω–µ—Ç email –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
                continue

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–Ω—è –Ω–µ–¥–µ–ª–∏
            days_offset = date_info.get('days_offset', 0)
            if today_dt_obj.weekday() == 4:  # –ü—è—Ç–Ω–∏—Ü–∞
                days_offset = date_info.get('send_on_friday', days_offset)

            target_date = today_dt_obj + timedelta(days=days_offset)
            target_date_str = target_date.strftime('%Y%m%d')

            logging.debug(f"–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–ª—è —Å–∫–ª–∞–¥–∞ {warehouse_code}: –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å –¥–∞—Ç–æ–π {target_date_str} (offset: {days_offset})")

            if not os.path.exists(folder_path):
                st.error(f"‚ùå –ü–∞–ø–∫–∞ {folder_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                logging.error(f"–ü–∞–ø–∫–∞ {folder_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return {} # –ï—Å–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç

            try:
                files = os.listdir(folder_path)
            except OSError as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ {folder_path}: {e}")
                logging.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ {folder_path}: {e}")
                return {}

            # --- –õ–û–ì–ò–ö–ê –ì–†–£–ü–ü–ò–†–û–í–ö–ò –ü–û –°–ö–õ–ê–î–£ ---
            # –ò—â–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –ù–ê–ß–ò–ù–ê–Æ–¢–°–Ø —Å –∫–æ–¥–∞ —Å–∫–ª–∞–¥–∞ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ü–µ–ª–µ–≤—É—é –¥–∞—Ç—É
            for file in files:
                if file.lower().endswith('.xlsx'):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø –ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ —Å –∫–æ–¥–∞ —Å–∫–ª–∞–¥–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –¶–ï–õ–ï–í–£–Æ –¥–∞—Ç—É
                    # –ü—Ä–∏–º–µ—Ä: —Ñ–∞–π–ª "7210_20250815_..." –¥–æ–ª–∂–µ–Ω –ø–æ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è —Å–∫–ª–∞–¥–∞ "7210"
                    if file.startswith(f"{warehouse_code}_") and target_date_str in file:
                        if warehouse_code not in grouped_files:
                            grouped_files[warehouse_code] = {
                                'email': email,
                                'files': []
                            }
                        grouped_files[warehouse_code]['files'].append(file)
                        logging.debug(f"–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –¥–ª—è —Å–∫–ª–∞–¥–∞ {warehouse_code}: {file}")

        return grouped_files
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {str(e)}")
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {str(e)}")
        return {}
# --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø get_files_for_today –ö–û–ù–ï–¶ ---

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
def send_email(outlook, to_email, subject, body, attachments, folder_path):
    try:
        mail = outlook.CreateItem(0)  # 0 = olMailItem
        mail.To = to_email
        mail.Subject = subject
        mail.Body = body
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–∏—è
        for attachment in attachments:
            full_path = os.path.join(folder_path, attachment)
            if os.path.exists(full_path):
                mail.Attachments.Add(full_path)
            else:
                st.warning(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {full_path}")
                logging.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {full_path}")
        mail.Send()
        st.success(f"‚úÖ –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {to_email}")
        logging.info(f"–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {to_email}")
        return True
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ –Ω–∞ {to_email}: {str(e)}")
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ –Ω–∞ {to_email}: {str(e)}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ (—Ä—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞)
def send_files_now():
    try:
        st.info("üöÄ –ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤")
        logging.info("–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å
        today = datetime.now()
        if today.weekday() in [5, 6]:  # –°—É–±–±–æ—Ç–∞=5, –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ=6
            st.info("‚ÑπÔ∏è –°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å. –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è.")
            logging.info("–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å. –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è.")
            return False

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_config()

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏)
        grouped_files = get_files_for_today(config['folder_path'])

        if not grouped_files:
            st.info("‚ÑπÔ∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–µ–≥–æ–¥–Ω—è")
            logging.info("–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–µ–≥–æ–¥–Ω—è")
            return False

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Outlook
        outlook = connect_outlook()
        if not outlook:
            return False

        success_count = 0
        for warehouse_code, data in grouped_files.items():
            subject = f"–û—Ç—á–µ—Ç—ã —Å–∫–ª–∞–¥–∞ {warehouse_code} –∑–∞ {today.strftime('%d.%m.%Y')}"
            body = f"–í–æ –≤–ª–æ–∂–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç—ã —Å–∫–ª–∞–¥–∞ {warehouse_code} –∑–∞ {today.strftime('%d.%m.%Y')}"

            success = send_email(
                outlook,
                data['email'],
                subject,
                body,
                data['files'],
                config['folder_path']
            )

            if success:
                success_count += 1
                st.success(f"‚úÖ –§–∞–π–ª—ã —Å–∫–ª–∞–¥–∞ {warehouse_code} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ {data['email']}")
                logging.info(f"–§–∞–π–ª—ã —Å–∫–ª–∞–¥–∞ {warehouse_code} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ {data['email']}")
            else:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ —Å–∫–ª–∞–¥–∞ {warehouse_code} –Ω–∞ {data['email']}")
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ —Å–∫–ª–∞–¥–∞ {warehouse_code} –Ω–∞ {data['email']}")

        st.success(f"üèÅ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}/{len(grouped_files)}")
        logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}/{len(grouped_files)}")
        return True
    except Exception as e:
        st.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")
        return False

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if page == "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è":
    st.header("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config()
    # –§–æ—Ä–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    with st.form("config_form"):
        st.subheader("–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        folder_path = st.text_input("–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–∞–π–ª–∞–º–∏", value=config.get('folder_path', ''))
        # –í–≤–æ–¥ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        st.subheader("–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
        schedule_times_str = st.text_input(
            "–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú)",
            value=', '.join(config.get('schedule_times', ['16:00']))
        )
        try:
            schedule_times = [t.strip() for t in schedule_times_str.split(',')]
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
            for t in schedule_times:
                datetime.strptime(t, '%H:%M')
        except ValueError:
            st.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä 09:00, 16:00")
            schedule_times = config.get('schedule_times', ['16:00'])
        sender_email = st.text_input("Email –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è", value=config.get('sender_email', ''))
        st.subheader("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è email –∞–¥—Ä–µ—Å–æ–≤")
        st.write("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å–∫–ª–∞–¥–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π email –∞–¥—Ä–µ—Å:")
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è email –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        email_data = []
        for code, email in config.get('email_config', {}).items():
            email_data.append({"–ö–æ–¥ —Å–∫–ª–∞–¥–∞": code, "Email": email})
        email_df = pd.DataFrame(email_data)
        edited_email_df = st.data_editor(email_df, num_rows="dynamic", key="email_editor")
        st.subheader("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–∞—Ç —Ñ–∞–π–ª–æ–≤")
        st.write("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∫–ª–∞–¥–∞:")
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è date_config
        date_data = []
        for code, date_info in config.get('date_config', {}).items():
            date_data.append({
                "–ö–æ–¥ —Å–∫–ª–∞–¥–∞": code,
                "–î–Ω–µ–π –∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–µ": date_info.get('days_offset', 0),
                "–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –ø—è—Ç–Ω–∏—Ü—É": date_info.get('send_on_friday', 0)
            })
        date_df = pd.DataFrame(date_data)
        edited_date_df = st.data_editor(date_df, num_rows="dynamic", key="date_editor")
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        submitted = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        if submitted:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º DataFrame –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è email
            email_config = {}
            for index, row in edited_email_df.iterrows():
                if pd.notna(row["–ö–æ–¥ —Å–∫–ª–∞–¥–∞"]) and pd.notna(row["Email"]):
                    email_config[str(row["–ö–æ–¥ —Å–∫–ª–∞–¥–∞"]).strip()] = str(row["Email"]).strip()
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º DataFrame –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è date_config
            date_config = {}
            for index, row in edited_date_df.iterrows():
                if pd.notna(row["–ö–æ–¥ —Å–∫–ª–∞–¥–∞"]):
                    code = str(row["–ö–æ–¥ —Å–∫–ª–∞–¥–∞"]).strip()
                    try:
                        days_offset = int(row["–î–Ω–µ–π –∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–µ"]) if pd.notna(row["–î–Ω–µ–π –∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–µ"]) else 0
                        send_on_friday = int(row["–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –ø—è—Ç–Ω–∏—Ü—É"]) if pd.notna(row["–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –ø—è—Ç–Ω–∏—Ü—É"]) else 0
                    except ValueError:
                        days_offset = 0
                        send_on_friday = 0
                    date_config[code] = {"days_offset": days_offset, "send_on_friday": send_on_friday}
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config['folder_path'] = folder_path
            config['schedule_times'] = schedule_times
            config['sender_email'] = sender_email
            config['email_config'] = email_config
            config['date_config'] = date_config
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            save_config(config)

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ (–æ–±–Ω–æ–≤–ª–µ–Ω–∞)
elif page == "–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤":
    st.header("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤")
    # –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    st.subheader("–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
    col1, col2 = st.columns(2)
    with col1:
        # –£–±—Ä–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ st.session_state.scheduler_running
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        # st.info("‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞...")
        if is_service_running(): # –¢–µ–ø–µ—Ä—å —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤—ã—à–µ
             st.success("üü¢ –°–µ—Ä–≤–∏—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—É—â–µ–Ω")
        else:
             st.error("üî¥ –°–µ—Ä–≤–∏—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    with col2:
        config = load_config()
        st.info(f"‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {', '.join(config.get('schedule_times', ['16:00']))}")
    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    st.markdown("---")
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—É–±—Ä–∞–Ω—ã –∫–Ω–æ–ø–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞)
    col1, col2 = st.columns(2)
    with col1:
        if st.button("üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å", type="primary", use_container_width=True):
            send_files_now()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä)
    st.subheader("üìã –§–∞–π–ª—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–µ–≥–æ–¥–Ω—è (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä)")
    config = load_config()
    grouped_files = get_files_for_today(config['folder_path'])
    if grouped_files:
        for warehouse_code, data in grouped_files.items():
            with st.expander(f"üì¶ –°–∫–ª–∞–¥ {warehouse_code} ‚Üí {data['email']}", expanded=True):
                st.write(f"**Email:** {data['email']}")
                st.write(f"**–§–∞–π–ª—ã ({len(data['files'])}):**")
                for file in data['files']:
                    st.code(file)
    else:
        st.info("‚ÑπÔ∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–µ–≥–æ–¥–Ω—è")

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–æ–≤
elif page == "–õ–æ–≥–∏":
    st.header("üìã –õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞–º–∏
    col1, col2 = st.columns(2)
    with col1:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏"):
            st.rerun()
    with col2:
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏"):
            try:
                with open('logs/sender.log', 'w') as f:
                    f.write('')
                st.success("–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã!")
                st.rerun()
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤: {str(e)}")
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ–≤
    try:
        if os.path.exists('logs/sender.log'):
            with open('logs/sender.log', 'r', encoding='utf-8') as f:
                log_content = f.read()
            if log_content:
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫
                lines = log_content.split('\n')
                last_lines = lines[-100:] if len(lines) > 100 else lines
                log_text = '\n'.join(last_lines)
                st.text_area("–õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", value=log_text, height=500, key="log_display")
            else:
                st.info("–õ–æ–≥–∏ –ø—É—Å—Ç—ã")
        else:
            st.info("–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {str(e)}")

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
elif page == "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è":
    st.header("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    st.subheader("1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    st.markdown("""
    1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python 3.8 –∏–ª–∏ –≤—ã—à–µ —Å [python.org](https://python.org)
    2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:
    ```bash
    pip install streamlit pywin32 schedule pandas pythoncom psutil
    ```
    3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Outlook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ
    """)
    st.subheader("2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    st.markdown("""
    1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
    2. –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–∞–π–ª–∞–º–∏
    3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ **–º–Ω–æ–∂–µ—Å—Ç–≤–æ** –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
    4. –£–∫–∞–∂–∏—Ç–µ email –∞–¥—Ä–µ—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∫–ª–∞–¥–∞
    5. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É –¥–∞—Ç —Ñ–∞–π–ª–æ–≤: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∫–ª–∞–¥–∞
    6. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    """)
    st.subheader("3. –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    st.markdown("""
    1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ:
    ```bash
    python sender_service.py
    ```
    2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit –≤ –¥—Ä—É–≥–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ:
    ```bash
    streamlit run auto_sender.py
    ```
    3. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –ø–æ –∞–¥—Ä–µ—Å—É, —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤ –∫–æ–Ω—Å–æ–ª–∏
    4. –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ "–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤" –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å" –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    """)
    st.subheader("4. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞")
    st.markdown("""
    1. –°–µ—Ä–≤–∏—Å `sender_service.py` —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    2. –û–Ω –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤—Ä–µ–º—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    3. –í —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ñ–∞–π–ª—ã —Å –¥–∞—Ç–æ–π, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö `date_config`
    4. –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤ —Å—É–±–±–æ—Ç—É –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
    """)
    st.subheader("5. –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–æ–≤")
    st.markdown("""
    –§–∞–π–ª—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏:
    ```
    [–ª—é–±–æ–µ_–∏–º—è]_[–¥–∞—Ç–∞].xlsx
    –ü—Ä–∏–º–µ—Ä: report_20250812.xlsx
    ```
    –î–∞—Ç–∞ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–∞—Ç–µ, —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–π –∫–∞–∫ "—Å–µ–≥–æ–¥–Ω—è + N –¥–Ω–µ–π" –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ `date_config`.
    """)
    st.subheader("6. –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º")
    st.markdown("""
    **Outlook –Ω–µ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è:**
    - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Outlook –∑–∞–ø—É—â–µ–Ω
    - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Outlook
    - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    **–§–∞–π–ª—ã –Ω–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è:**
    - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª—ã –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ –∏ –¥–∞—Ç—É
    - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ `date_config`
    **–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
    - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ "–õ–æ–≥–∏"
    - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–∏—Å `sender_service.py` –∑–∞–ø—É—â–µ–Ω
    - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É
    """)

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–Ω–µ—à–Ω–∏–º —Å–µ—Ä–≤–∏—Å–æ–º (–≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏)
st.sidebar.markdown("---")
st.sidebar.subheader("‚öôÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞")

# –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏)
# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –∫–∞–∂–¥–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
service_running = is_service_running()
if service_running:
    st.sidebar.success("üü¢ –°–µ—Ä–≤–∏—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—É—â–µ–Ω")
    if st.sidebar.button("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å –æ—Ç–ø—Ä–∞–≤–∫–∏"):
        stop_service()
        # st.rerun() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ stop_service
else:
    st.sidebar.error("üî¥ –°–µ—Ä–≤–∏—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    if st.sidebar.button("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å –æ—Ç–ø—Ä–∞–≤–∫–∏"):
        start_service()
        # st.rerun() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ start_service

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown("üìß Auto Sender Outlook - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ Win32 API")